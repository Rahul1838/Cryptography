#include<bits/stdc++.h>
#include<cstring>
#include<cmath>
using namespace std;
int pt[8],key[10];
int p10[10]={2,4,1,6,3,9,0,8,7,5},p8[8]={5,2,6,3,7,4,9,8},p4[4]={1,3,2,0},ip[8]={1,5,2,0,3,7,4,6},ep[8]={3,0,1,2,1,2,3,0},ip_inv[8]={3,0,2,4,6,1,7,5};
int P10[10],k1[8],k2[8],IP[8],EP[8],P4[4],IP_inverse[8];
int arr[5],leftt[5],rightt[5],l[4],r[4],temp1[10],temp2[10],comb[8],comb1[10],comb2[10];
int tempp;
char binary[4],binary2[4];
int v[4];

int apply_S0(int row,int column)
{
 int s0[4][4]={
			{1,0,3,2},
			{3,2,1,0},
			{0,2,1,3},
			{3,1,3,2}
			};
 return s0[row][column];
}

int apply_S1(int row,int column)
{
 int s1[4][4]={
			{0,1,2,3},
			{2,0,1,3},
			{3,0,1,0},
			{2,1,0,3}
			};
 return s1[row][column];
}

void p10_permu(int temp1[10],int temp2[10])
{
 for(int i=0;i<10;i++)
    {
      temp1[i]=temp2[p10[i]] ;
    }
}

void p8_permu(int temp1[10],int temp2[10])
{
 for(int i=0;i<8;i++)
    {
      temp1[i]=temp2[p8[i]] ;
    }
}

void p4_permu(int temp1[5],int temp2[5])
{
 for(int i=0;i<4;i++)
    {
      temp1[i]=temp2[p4[i]] ;
    }
}

void IP_permu(int temp1[10],int temp2[10])
{
 for(int i=0;i<8;i++)
    {
      temp1[i]=temp2[ip[i]] ;
    }
}

void E_permu(int temp1[10],int temp2[10])
{
 for(int i=0;i<8;i++)
    {
      temp1[i]=temp2[ep[i]] ;
    }
}

void IP_inverse_permu(int temp1[10],int temp2[])
{
 for(int i=0;i<8;i++)
    {
      temp1[i]=temp2[ip_inv[i]] ;
    }
}

void shiftdigits(int arr[5])
{
tempp=arr[0];
for(int i=0;i<4;i++)
 {
 arr[i]=arr[i+1];
 }
 arr[4]=tempp;
}

void shiftdigits_by_2(int arr[5])
{
int tempp1=arr[0];
int tempp2=arr[1];
for(int i=0;i<3;i++)
 {
 arr[i]=arr[i+2];
 }
 arr[3]=tempp1;
 arr[4]=tempp2;
}

void combine(int temp1[10],int temp2[5],int arr[5])
{int j=0;
 for(int i=0;i<10;i++)
 {
  if(i<5)
   {temp1[i]=temp2[i];}
  else
   {temp1[i]=arr[j];
    j=j+1;
   }
 }
}
void key_generation()
  {
    p10_permu(P10,key);
    for(int i=0;i<5;i++)
    {
      leftt[i]=P10[i];
      rightt[i]=P10[i+5];
    }
    shiftdigits(leftt);
    shiftdigits(rightt);
    combine(comb1,leftt,rightt);
    p8_permu(k1,comb1);
    cout<<endl<<"KEY 1 is:";
    for(int i=0;i<8;i++)
    {
    cout<< k1[i];
    }
    shiftdigits_by_2(leftt);
    shiftdigits_by_2(rightt);
    combine(comb2,leftt,rightt);
    p8_permu(k2,comb2);
    cout<<endl<<"KEY 2 is:";
    for(int i=0;i<8;i++)
    {
     cout<< k2[i];
    }
  }
void XOR(int comb[10],int temp1[10],int temp2[10])
{for(int i=0;i<8;i++)
 {
  if(temp1[i]==temp2[i])
  {comb[i]=0;}
  else
  {comb[i]=1;}
 }
}

void dec_to_binary(int num,char binary[4])
{if(num == 0)
 strcpy(binary,"00");

 if(num == 1)
 strcpy(binary,"01");

 if(num == 2)
 strcpy(binary,"10");

 if(num == 3)
 strcpy(binary,"11");
}

int bin_to_decimal(int a,int b)
{int val=0,pos=1,res[2];
 res[0]=a,res[1]=b;
 for(int i=0;i<2;i++)
  {
   if(res[i]==1)
   {
    val=val+pow(2,pos);
   }
   pos=pos-1;
  }
 return val;
}

void round_function(int key[8],int lef[8],int rig[8])
  { int l2[4],r2[4];

    E_permu(EP,rig);
    /*cout<<endl;
    for(int i=0;i<8;i++)
    {
     cout<<EP[i];
    }*/

    XOR(comb,EP,key);
    /*cout<<endl;
    for(int i=0;i<8;i++)
    {
     cout<<comb[i];
    }*/
    for(int i=0;i<4;i++)
    {
      l2[i]=comb[i];
      r2[i]=comb[i+4];
    }

    int val1,val2,num;
    val1=bin_to_decimal(l2[0],l2[3]);
    val2=bin_to_decimal(l2[1],l2[2]);
    num=apply_S0(val1,val2);
    dec_to_binary(num,binary);

    val1=bin_to_decimal(r2[0],r2[3]);
    val2=bin_to_decimal(r2[1],r2[2]);
    num=apply_S1(val1,val2);
    dec_to_binary(num,binary2);

    strcat(binary,binary2);
    //cout<<endl<<binary;

    int t[5];
    char *s=binary;
    int a=atoi(s);
    //cout<<a;
    while(a!=0)
    {for(int i=3;i>=0;i--)
      {int digit=a%10;
       a=a/10;
       t[i]=digit;
      }
    }
    /*or(int i=0;i<4;i++)
        cout<<t[i]<<" "; */
    p4_permu(P4,t);
    /*for(int i=0;i<4;i++)
        cout<<P4[i]<<" "; */

    XOR(v,lef,P4);
    /*for(int i=0;i<4;i++)
        cout<<v[i]<<" ";*/
    cout<<endl;
  }

void encryption()
{int v2[8],t1[4];
 IP_permu(IP,pt);
 /*for(int i=0;i<8;i++)
    {
     cout<<IP[i];
    }
 */
for(int i=0;i<4;i++)
    {
      l[i]=IP[i];
      r[i]=IP[i+4];
    }

 round_function(k1,l,r);

 for(int i=0;i<4;i++)
  {t1[i]=v[i];}

 round_function(k2,r,v);

 int j=0;
 for(int i=0;i<8;i++)
 {
  if(i<4)
   {v2[i]=v[i];}
  else
   {v2[i]=t1[j];
    j=j+1;
   }
 }

 IP_inverse_permu(IP_inverse,v2);
 cout<<endl<<"Final cipher text:";
 for(int i=0;i<8;i++)
    {
     cout<<IP_inverse[i]<<" ";
    }
cout<<endl;
}

void decryption()
{int v2[8],t1[4];
 IP_permu(IP,IP_inverse);
 /*for(int i=0;i<8;i++)
    {
     cout<<IP[i];
    }
 */
for(int i=0;i<4;i++)
    {
      l[i]=IP[i];
      r[i]=IP[i+4];
    }

 round_function(k2,l,r);

 for(int i=0;i<4;i++)
  {t1[i]=v[i];}

 round_function(k1,r,v);

 int j=0;
 for(int i=0;i<8;i++)
 {
  if(i<4)
   {v2[i]=v[i];}
  else
   {v2[i]=t1[j];
    j=j+1;
   }
 }

 IP_inverse_permu(IP_inverse,v2);
 cout<<endl<<"original plain text [Decipher text]:";
 for(int i=0;i<8;i++)
    {
     cout<<IP_inverse[i]<<" ";
    }
}

int main()
{
    cout<<endl<<"Enter key:";
    for(int i=0;i<10;i++)
    {
    cin>> key[i];
    }
    key_generation();

    cout<<endl<<endl<<"Enter plane text:";
    for(int i=0;i<8;i++)
    {
     cin>> pt[i];
    }

    encryption();
    decryption();

}
